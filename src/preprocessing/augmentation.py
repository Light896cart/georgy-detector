import torch
from torchvision import transforms
from PIL import Image
import torchvision.transforms.functional as F
import numpy as np

class ResizeKeepAR:
    """
    Resize —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π + –ø–∞–¥–¥–∏–Ω–≥ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    """
    def __init__(self, target_size=512, fill=0):
        self.target_size = target_size
        self.fill = fill  # —Ü–≤–µ—Ç –ø–∞–¥–¥–∏–Ω–≥–∞ (0 = —á—ë—Ä–Ω—ã–π)

    def __call__(self, img):
        w, h = img.size

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—è AR
        scale = self.target_size / max(w, h)
        new_w = int(w * scale)
        new_h = int(h * scale)
        img = img.resize((new_w, new_h), Image.Resampling.LANCZOS)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ —á—ë—Ä–Ω–æ–º —Ñ–æ–Ω–µ
        new_img = Image.new("RGB", (self.target_size, self.target_size), (self.fill, self.fill, self.fill))
        left = (self.target_size - new_w) // 2
        top = (self.target_size - new_h) // 2
        new_img.paste(img, (left, top))

        return new_img

# –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å torchvision
def get_transforms():
    train_transform = transforms.Compose([
        ResizeKeepAR(target_size=150, fill=0),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º AR + –ø–∞–¥–¥–∏–Ω–≥
        transforms.RandomCrop(150, pad_if_needed=True, padding_mode='constant', fill=0),
        transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.1, hue=0.05),
        transforms.RandomRotation(10, interpolation=F.InterpolationMode.BICUBIC),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])

    # üîΩ –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ resize + —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä–æ–ø + –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    val_transform = transforms.Compose([
        ResizeKeepAR(target_size=150, fill=0),  # –¢–æ –∂–µ —Å–∞–º–æ–µ
        transforms.CenterCrop(150),              # ‚úÖ –¢–æ–ª—å–∫–æ —Ü–µ–Ω—Ç—Ä, –±–µ–∑ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])

    return train_transform, val_transform